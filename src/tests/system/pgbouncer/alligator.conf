entrypoint {
	tcp 1111;
}

modules {
	postgresql /usr/lib64/libpq.so;
}

aggregate {
	postgresql postgresql://postgres@localhost name=pg;
}

query {
	expr "SELECT pg_database.datname, pg_database_size(pg_database.datname) AS postgresql_databases_size, datconnlimit AS postgresql_database_connection_limit FROM pg_database";
	field postgresql_databases_size postgresql_database_connection_limit;
	datasource pg;
	make postgresql_databases_size;
}
query {
	expr "SELECT count(datname) AS postgresql_databases_count FROM pg_database";
	field postgresql_databases_count;
	datasource pg;
	make postgresql_databases_count;
}
query {
	expr "SELECT extract(seconds from (now() - pg_last_xact_replay_timestamp())) AS postgresql_replication_lag";
	field postgresql_replication_lag;
	datasource pg;
	make postgresql_replication_lag;
}
query {
	expr "extract (epoch from now() - pg_postmaster_start_time())::int as postgresql_start_time";
	field postgresql_start_time;
	datasource pg;
	make postgresql_start_time;
}
query {
	expr "SELECT sum(numbackends)*100/(SELECT current_setting('max_connections')::int) AS postgresql_connections_percent FROM pg_stat_database"
	field postgresql_connections_percent;
	datasource pg;
	make postgresql_connections_percent;
}
query {
	expr "SELECT count(*) FROM pg_stat_replication AS postgresql_number_replicas WHERE state='streaming'";
	field postgresql_number_replicas;
	datasource pg;
	make postgresql_number_replicas;
}

query {
	expr "SELECT datname AS dbname, xact_commit AS postgresql_commit, xact_rollback as postgresql_rollback, blks_read AS postgresql_blks_read, blks_hit AS postgresql_blks_hit, tup_returned AS postgresql_tup_returned, tup_fetched AS postgresql_tup_fetched, tup_inserted AS postgresql_tup_inserted, tup_updated AS postgresql_tup_updated, tup_deleted AS postgresql_tup_updated, conflicts AS postgresql_conflicts, temp_files AS postgresql_temp_files, temp_bytes AS postgresql_temp_bytes, deadlocks AS postgresql_deadlocks, checksum_failures AS postgresql_checksum_failures, blk_read_time AS postgresql_blk_read_time, blk_write_time AS postgresql_blk_write_time FROM pg_stat_database";
	field postgresql_commit postgresql_rollback postgresql_blks_read postgresql_blks_hit postgresql_tup_returned postgresql_tup_fetched postgresql_tup_inserted postgresql_tup_updated postgresql_tup_updated postgresql_conflicts postgresql_temp_files postgresql_temp_bytes postgresql_deadlocks postgresql_checksum_failures postgresql_blk_read_time postgresql_blk_write_time;
	datasource pg;
	make postgresql_stat_database;
}

query {
	expr "SELECT pg_database.datname AS dbname, pg_authid.rolname AS user, calls AS postgresql_calls, total_time AS postgresql_total_time, min_time AS postgresql_min_time, max_time AS postgresql_max_time, mean_time AS postgresql_mean_time, stddev_time AS postgresql_stddev_time, rows AS postgresql_rows, shared_blks_hit AS postgresql_shared_blks_hit, shared_blks_read AS postgresql_shared_blks_read, shared_blks_dirtied AS postgresql_shared_blks_dirtied, shared_blks_written AS postgresql_shared_blks_written, local_blks_hit AS postgresql_local_blks_hit, local_blks_read AS postgresql_local_blks_read, local_blks_dirtied AS postgresql_local_blks_dirtied, local_blks_written AS postgresql_local_blks_written, temp_blks_read AS postgresql_temp_blks_read, temp_blks_written AS postgresql_temp_blks_written, blk_read_time AS postgresql_blk_read_time, blk_write_time AS postgresql_blk_write_time FROM pg_stat_statements INNER JOIN pg_catalog.pg_database AS pg_database ON pg_database.oid = dbid INNER JOIN pg_catalog.pg_authid AS pg_authid ON pg_authid.oid = userid";
	field postgresql_calls postgresql_total_time postgresql_min_time postgresql_max_time postgresql_mean_time postgresql_stddev_time postgresql_rows postgresql_shared_blks_hit postgresql_shared_blks_read postgresql_shared_blks_dirtied postgresql_shared_blks_written postgresql_local_blks_hit postgresql_local_blks_read postgresql_local_blks_dirtied postgresql_local_blks_written postgresql_temp_blks_read postgresql_temp_blks_written postgresql_blk_read_time postgresql_blk_write_time;
	datasource pg;
	make postgresql_stat_database;
}

query {
	expr "SELECT schemaname AS schema, relname AS relation, seq_scan AS postgresql_seq_scan, seq_tup_read AS postgresql_seq_tup_read, idx_scan AS postgresql_idx_scan, idx_tup_fetch AS postgresql_idx_tup_fetch, n_tup_ins AS postgresql_tup_insert_count, n_tup_upd AS postgresql_tup_update_count, n_tup_del AS postgresql_tup_delete_count, n_tup_hot_upd AS postgresql_tup_hot_update_count, n_live_tup AS postgresql_live_tuples, n_dead_tup AS postgresql_dead_tuples, n_mod_since_analyze AS postgresql_mod_since_analyze, vacuum_count AS postgresql_vacuum_count, autovacuum_count AS postgresql_autovacuum_count, analyze_count AS postgresql_analyze_count, autoanalyze_count AS postgresql_autoanalyze_count FROM pg_stat_user_tables";
	field postgresql_seq_scan postgresql_seq_tup_read postgresql_idx_scan postgresql_idx_tup_fetch postgresql_tup_insert_count postgresql_tup_update_count postgresql_tup_delete_count postgresql_tup_hot_update_count postgresql_live_tuples postgresql_dead_tuples postgresql_mod_since_analyze postgresql_vacuum_count postgresql_autovacuum_count postgresql_analyze_count postgresql_autoanalyze_count;
	datasource pg/*;
	make postgresql_stat_database;
}

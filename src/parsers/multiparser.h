#pragma once
#define MAX_RESPONSE_SIZE 6553500
#include "events/context_arg.h"
#include "parsers/http_proto.h"
void alligator_multiparser(char *buf, size_t slen, void (*handler)(char*, size_t, context_arg*), string *response, context_arg *carg);
void redis_handler(char *metrics, size_t size, context_arg *carg);
int8_t redis_validator(context_arg *carg, char *data, size_t size);
void redis_cluster_handler(char *metrics, size_t size, context_arg *carg);
int8_t redis_cluster_validator(context_arg *carg, char *data, size_t size);
void sentinel_handler(char *metrics, size_t size, context_arg *carg);
void aerospike_statistics_handler(char *metrics, size_t size, context_arg *carg);
void aerospike_get_namespaces_handler(char *metrics, size_t size, context_arg *carg);
void aerospike_status_handler(char *metrics, size_t size, context_arg *carg);
void aerospike_namespace_handler(char *metrics, size_t size, context_arg *carg);
void http_proto_handler(char *metrics, size_t size, context_arg *carg);
//char* http_proto_proxer(char *metrics, size_t size, context_arg *carg);
void zookeeper_isro_handler(char *metrics, size_t size, context_arg *carg);
void zookeeper_wchs_handler(char *metrics, size_t size, context_arg *carg);
void zookeeper_mntr_handler(char *metrics, size_t size, context_arg *carg);

void clickhouse_system_handler(char *metrics, size_t size, context_arg *carg);
void clickhouse_columns_handler(char *metrics, size_t size, context_arg *carg);
void clickhouse_dictionary_handler(char *metrics, size_t size, context_arg *carg);
void clickhouse_merges_handler(char *metrics, size_t size, context_arg *carg);
void clickhouse_replicas_handler(char *metrics, size_t size, context_arg *carg);
void beanstalkd_handler(char *metrics, size_t size, context_arg *carg);
void memcached_handler(char *metrics, size_t size, context_arg *carg);
void gearmand_handler(char *metrics, size_t size, context_arg *carg);
void haproxy_info_handler(char *metrics, size_t size, context_arg *carg);
void haproxy_pools_handler(char *metrics, size_t size, context_arg *carg);
void haproxy_stat_handler(char *metrics, size_t size, context_arg *carg);
void haproxy_sess_handler(char *metrics, size_t size, context_arg *carg);
void haproxy_table_handler(char *metrics, size_t size, context_arg *carg);
void uwsgi_handler(char *metrics, size_t size, context_arg *carg);
void php_fpm_handler(char *metrics, size_t size, context_arg *carg);
void nats_varz_handler(char *metrics, size_t size, context_arg *carg);
void nats_subsz_handler(char *metrics, size_t size, context_arg *carg);
void nats_connz_handler(char *metrics, size_t size, context_arg *carg);
void nats_routez_handler(char *metrics, size_t size, context_arg *carg);
void riak_handler(char *metrics, size_t size, context_arg *carg);
void rabbitmq_overview_handler(char *metrics, size_t size, context_arg *carg);
void rabbitmq_nodes_handler(char *metrics, size_t size, context_arg *carg);
void rabbitmq_connections_handler(char *metrics, size_t size, context_arg *carg);
void rabbitmq_channels_handler(char *metrics, size_t size, context_arg *carg);
void rabbitmq_exchanges_handler(char *metrics, size_t size, context_arg *carg);
void rabbitmq_queues_handler(char *metrics, size_t size, context_arg *carg);
void rabbitmq_vhosts_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_nodes_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_cluster_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_health_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_index_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_settings_handler(char *metrics, size_t size, context_arg *carg);
void eventstore_stats_handler(char *metrics, size_t size, context_arg *carg);
void eventstore_projections_handler(char *metrics, size_t size, context_arg *carg);
void eventstore_info_handler(char *metrics, size_t size, context_arg *carg);
void flower_handler(char *metrics, size_t size, context_arg *carg);
void powerdns_handler(char *metrics, size_t size, context_arg *carg);
void opentsdb_handler(char *metrics, size_t size, context_arg *carg);
void log_handler(char *metrics, size_t size, context_arg *carg);
void nginx_upstream_check_handler(char *metrics, size_t size, context_arg *carg);
void monit_handler(char *metrics, size_t size, context_arg *carg);
void dummy_handler(char *metrics, size_t size, context_arg *carg);
void rsyslog_impstats_handler(char *metrics, size_t size, context_arg *carg);
void gdnsd_handler(char *metrics, size_t size, context_arg *carg);
int8_t gdnsd_validator(char *data, size_t size);
void syslog_ng_handler(char *metrics, size_t size, context_arg *carg);
void consul_handler(char *metrics, size_t size, context_arg *carg);
void nifi_handler(char *metrics, size_t size, context_arg *carg);
void varnish_handler(char *metrics, size_t size, context_arg *carg);
void json_handler(char *metrics, size_t size, context_arg *carg);
void hadoop_handler(char *metrics, size_t size, context_arg *carg);
void unbound_handler(char *metrics, size_t size, context_arg *carg);
int8_t unbound_validator(char *data, size_t size);
void solr_handler(char *metrics, size_t size, context_arg *carg);
void blackbox_null(char *metrics, size_t size, context_arg *carg);
void cluster_sync_handler(char *metrics, size_t size, context_arg *carg);
void cluster_aggregate_sync_handler(char *metrics, size_t size, context_arg *carg);
void clickhouse_response_catch(char *metrics, size_t size, context_arg *carg);
void elasticsearch_response_catch(char *metrics, size_t size, context_arg *carg);
void lang_parser_handler(char *metrics, size_t size, context_arg *carg);
void multicollector(http_reply_data* http_data, char *str, size_t size, context_arg *carg);
void aerospike_parser_push();
void beanstalkd_parser_push();
void clickhouse_parser_push();
void consul_parser_push();
void couchbase_parser_push();
void couchdb_parser_push();
void druid_parser_push();
void druid_worker_parser_push();
void druid_historical_parser_push();
void druid_broker_parser_push();
void dummy_parser_push();
void elasticsearch_parser_push();
void eventstore_parser_push();
void flower_parser_push();
void gdnsd_parser_push();
void gearmand_parser_push();
void hadoop_parser_push();
void haproxy_parser_push();
//void http_parser_push();
void httpd_parser_push();
void ipmi_parser_push();
void json_parser_push();
void json_query_push();
void keepalived_parser_push();
void kubeconfig_parser_push();
void kubernetes_ingress_parser_push();
void kubernetes_endpoint_parser_push();
void lang_parser_push();
void lighttpd_parser_push();
void memcached_parser_push();
void mogilefs_parser_push();
void mongodb_parser_push();
void monit_parser_push();
void moosefs_parser_push();
void prometheus_metrics_parser_push();
void tcp_parser_push();
void blackbox_parser_push();
void http_parser_push();
void process_parser_push();
void mysql_parser_push();
void sphinxsearch_parser_push();
void named_parser_push();
void nats_parser_push();
void nginx_upstream_check_parser_push();
void nsd_parser_push();
void ntp_parser_push();
void opentsdb_parser_push();
void oracle_parser_push();
void oracle_query_parser_push();
void patroni_parser_push();
void pg_parser_push();
void pgbouncer_parser_push();
void odyssey_parser_push();
void pgpool_parser_push();
void powerdns_parser_push();
void rabbitmq_parser_push();
void redis_parser_push();
void redis_parser_ping_push();
void riak_parser_push();
void sentinel_parser_push();
void squid_parser_push();
void syslog_ng_parser_push();
void tftp_parser_push();
void unbound_parser_push();
void uwsgi_parser_push();
void varnish_parser_push();
void zookeeper_parser_push();
void nvidia_smi_parser_push();
void lighttpd_status_handler(char *metrics, size_t size, context_arg *carg);
void lighttpd_statistics_handler(char *metrics, size_t size, context_arg *carg);
void httpd_status_handler(char *metrics, size_t size, context_arg *carg);
void flower_handler(char *metrics, size_t size, context_arg *carg);
void nsd_handler(char *metrics, size_t size, context_arg *carg);
void ntp_handler(char *ntpData, size_t size, context_arg *carg);
void elasticsearch_nodes_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_health_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_index_handler(char *metrics, size_t size, context_arg *carg);
void elasticsearch_settings_handler(char *metrics, size_t size, context_arg *carg);
void cassandra_parser_push();
void auditd_handler(char *metrics, size_t size, context_arg *carg);
